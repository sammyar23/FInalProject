doctype html
html
  head
    title Your Website Title
    link(rel='stylesheet', href='/style.css')  
  body
    header
      .container
        .logo-container
          img#logo(src='/techcrafters.png', alt='TechCrafters Logo')
        nav
          ul.nav-list
            li.nav-item: a(href="/") Home
            li.nav-item: a(href="/forum") Forum
            li.nav-item: a(href="/build-pc") Build PC
            li.nav-item: a(href="/recommend-pc") Recommended PCs
            li.nav-item: a(href="/info-help") Info/Help
            if currentUser
              li.nav-item: a(href="/logout") Logout (#{currentUser.username})
            else
              li.nav-item: a(href="/login") Login
              li.nav-item: a(href="/register") Sign Up

    block content
      .build-title Name & Build Your PC
      form#build-form(action="/save-build" method="post")
        fieldset
          legend Name Your Build
          .form-row
            label(for="build-name") Build Name
            input(type="text" name="buildName" id="build-name" placeholder="Enter a name for your build" required)

          legend Choose Your Components
          // CPU selection
          .form-row
            label(for="cpu") CPU
            select(name="components[0].type" id="cpu-select" required)
              option(value="cpu")
              each cpu in cpus
                option(value=cpu.name data-price=cpu.price) #{cpu.name} - $#{cpu.price}

          // Motherboard selection
          .form-row
            label(for="motherboard") Motherboard
            select(name="motherboard" id="motherboard-select" required)
              each mb in motherboards
                if mb.socket && mb.price
                  option(value=mb.name data-socket=mb.socket data-price=mb.price) #{mb.name} - $#{mb.price}

          .form-row
            label(for="gpu") GPU
            select(name="gpu" id="gpu-select")
              each gpu in gpus
                option(value=gpu.id data-price=gpu.price) #{gpu.name} - $#{gpu.price}

          .form-row
            label(for="memory") Memory
            select(name="memory" id="memory-select")
              each mem in memory
                option(value=mem.id data-price=mem.price) #{mem.name} - $#{mem.price}

          .form-row
            label(for="case") Case
            select(name="case" id="case-select")
              each caseItem in cases
                option(value=caseItem.id data-price=caseItem.price) #{caseItem.name} - $#{caseItem.price}

          .form-row
            label(for="case-fan") Case Fan
            select(name="case-fan" id="case-fan-select")
              each fan in case_fans
                option(value=fan.id data-price=fan.price) #{fan.name} - $#{fan.price}

          .form-row
            label(for="cpu-cooler") CPU Cooler
            select(name="cpu-cooler" id="cpu-cooler-select")
              each cooler in cpu_coolers
                option(value=cooler.id data-price=cooler.price) #{cooler.name} - $#{cooler.price}

          .form-row
            label(for="internal-hard-drive") Internal Hard Drive
            select(name="internal-hard-drive" id="internal-hard-drive-select")
              each hdd in internal_hard_drives
                option(value=hdd.id data-price=hdd.price) #{hdd.name} - $#{hdd.price}

          .form-row
            label(for="power-supply") Power Supply
            select(name="power-supply" id="power-supply-select")
              each psu in power_supplies
                option(value=psu.id data-price=psu.price) #{psu.name} - $#{psu.price}

          .form-row
            label(for="sound-card") Sound Card
            select(name="sound-card" id="sound-card-select")
              each sc in sound_cards
                option(value=sc.id data-price=sc.price) #{sc.name} - $#{sc.price}


            input.form-button(type="submit" value="Build")

          .form-row.total-price
            span Total Build Price: $
            span#total-price 0
    script.
      document.addEventListener('DOMContentLoaded', () => {
        const cpuSelect = document.getElementById('cpu-select');
        if (!cpuSelect) {
            console.log('CPU select element not found.');
            return;
        }

        cpuSelect.addEventListener('change', () => {
            const socket = cpuSelect.value;
            fetch(`/api/components/motherboard?socket=${socket}`)
                .then(response => response.json())
                .then(motherboards => {
                    const motherboardSelect = document.getElementById('motherboard-select');
                    motherboardSelect.innerHTML = ''; // Clear existing options

                    motherboards.forEach(motherboard => {
                        const option = new Option(`${motherboard.name} - $${motherboard.price}`, motherboard.name);
                        option.dataset.price = motherboard.price;
                        motherboardSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Failed to fetch motherboards:', error));
        });
      });


    script.
      document.addEventListener('DOMContentLoaded', function() {
        const selects = document.querySelectorAll('select');
        const totalPriceElement = document.getElementById('total-price');

        function updateTotalPrice() {
          let totalPrice = 0;
          selects.forEach(select => {
            const selectedOption = select.options[select.selectedIndex];
            if (selectedOption && selectedOption.dataset.price) {
              totalPrice += parseFloat(selectedOption.dataset.price);
            }
          });
          totalPriceElement.textContent = totalPrice.toFixed(2);
        }

        selects.forEach(select => {
          select.addEventListener('change', updateTotalPrice);
        });

        // Run the calculation once on load
        updateTotalPrice();
      });

    script.
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('myForm');
        if (!form) {
            console.log('Form not found');
            return;
        }

        form.addEventListener('submit', function(event) {
          event.preventDefault();;

          let isValid = true;
          const components = [
            'cpu',
            'motherboard',
            'gpu',
            'memory',
            'case',
            'case-fan',
            'cpu-cooler',
            'internal-hard-drive',
            'power-supply',
            'sound-card'
          ]; // You need to collect component data from your form inputs

          // Validate the components
          components.forEach(component => {
            if (isNaN(component.price)) {
              isValid = false;
              alert('Please fix the prices. They should be numbers.');
            }
          });

          // If validation passed, proceed with the form submission
          if (isValid) {
            form.submit();
          }
        });
      });

    script.
      document.addEventListener('DOMContentLoaded', () => {
        // Log to console once the page is fully loaded
        console.log('Page fully loaded');

        // Select the form element
        const form = document.getElementById('build-form');
        if (!form) {
            // Log an error if the form is not found
            console.error('Build form not found.');
            return;
        }
        // Log to console that the form was found
        console.log('Build form found');

        // Add an event listener for the form's submit event
        form.addEventListener('submit', (event) => {
          // Prevent the default form submission
          event.preventDefault();
          console.log('Form submission intercepted');

          // Get the value of the build name input
          const buildName = document.getElementById('build-name').value;
          // Validate that the build name is not empty
          if (!buildName) {
            alert('Please enter a build name.');
            return;
          }

          // Select all dropdowns for components
          const selects = document.querySelectorAll('select');
          let isValid = true;
          // Map through each dropdown to create an array of component objects
          const components = Array.from(selects).map(select => {
            const selectedIndex = select.selectedIndex;
            const option = select.options[selectedIndex];
            const price = parseFloat(option.getAttribute('data-price'));
            // Check if the price is not a number, and update isValid accordingly
            if (isNaN(price)) {
              isValid = false;
              alert('Please fix the prices. They should be numbers.');
            }
            return {
              type: select.name,
              name: option.value,
              price: price || 0
            };
          });

          // Proceed only if all prices are valid numbers
          if (isValid) {
            const payload = {
              buildName,
              components
            };

            // Send the build data to the server using fetch
            fetch('/save-build', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Build saved successfully', data);
                // Redirect or update UI as needed
                window.location.href = '/saved-builds';
            })
            .catch(error => {
                console.error('Error saving the build:', error);
            });
          }
        });
      });
